name: Update

on:
  workflow_dispatch:

defaults:
  run:
    shell: PowerShell

jobs:
  Deploy:
    runs-on: [ windows-latest ]
    steps:
      - uses: actions/checkout@v2

      - name: CheckUser
        run: |
          if ("$ENV:GITHUB_REPOSITORY" -eq "ciellosinc/FSC-PS" -and "$ENV:GITHUB_ACTOR" -ne "onikolaiev") {
            Write-Host "::Error::You cannot run deploy and collect in the ciellosinc/FSC-PS repo"
            exit 1
          }
      - name: Update Nugets
        run: |
          enum LcsAssetFileType {
              Model = 1
              ProcessDataPackage = 4
              SoftwareDeployablePackage = 10
              GERConfiguration = 12
              DataPackage = 15
              PowerBIReportModel = 19
              ECommercePackage = 26
              NuGetPackage = 27
              RetailSelfServicePackage = 28
              CommerceCloudScaleUnitExtension = 29
          }
          function installModules {
              Param(
                  [String[]] $modules
              )

              $modules | ForEach-Object {
                  if($_ -eq "Az")
                  {
                      Set-ExecutionPolicy RemoteSigned
                      try {
                          Uninstall-AzureRm
                      }
                      catch {
                      }

                  }

                  if (-not (get-installedmodule -Name $_ -ErrorAction SilentlyContinue)) {
                      Write-Host "Installing module $_"
                      Install-Module $_ -Force -AllowClobber | Out-Null
                  }
              }
              $modules | ForEach-Object { 
                  Write-Host "Importing module $_"
                  Import-Module $_ -DisableNameChecking -WarningAction SilentlyContinue | Out-Null
              }
          }
          function GetHeader {
              param (
                  [string] $token,
                  [string] $accept = "application/json"
              )
              $headers = @{ "Accept" = $accept }
              if (![string]::IsNullOrEmpty($token)) {
                  $headers["Authorization"] = "Bearer $token"
              }

              return $headers
          }
          function GetToken {
              param (
                  [string] $lcsClientId,
                  [string] $lcsUserName,
                  [string] $lcsUserPasswd
              )
              $body = 'grant_type=password' + `
              '&client_id='+$($lcsClientId)+'' + `
              '&username='+$($lcsUserName)+'' +`
              '&password='+$($lcsUserPasswd)+'' +`
              '&resource=https://lcsapi.lcs.dynamics.com' +`
              '&scope=openid'

              return (Invoke-RestMethod -Method Post -Uri https://login.microsoftonline.com/common/oauth2/token -Body $body).access_token
          }
          function GetLCSSharedAssetsList {
              param (
                  [string] $token,
                  [LcsAssetFileType] $FileType = [LcsAssetFileType]::SoftwareDeployablePackage

              )
              $header = GetHeader -token $token
              $url = "https://lcsapi.lcs.dynamics.com/box/fileasset/GetSharedAssets?fileType="+$($FileType.value__)
              $assetsList = Invoke-RestMethod -Method Get -Uri $url  -Headers $header
              return $assetsList
          }
          function UploadAssetToStorage {
              param (
                  [string]$AssetId,
                  [string]$AssetName,
                  [string]$ProjectId,
                  [string]$LCSToken,
                  [string]$PackageDestination = "C:\temp\packages"
              )
              Begin{
                  $storageAccountName = 'ciellosarchive'
                  $storageContainer = 'nuget'
                  #Just read-only SAS token :)
                  $StorageSAStoken = '{{ secrets.NUGET_STORAGE_SAS_TOKEN }}'
                  $ctx = New-AzStorageContext -StorageAccountName $storageAccountName -SasToken $StorageSAStoken
                  $header = GetHeader -token $token
                  if(-not(Test-Path $PackageDestination))
                  {
                      [System.IO.Directory]::CreateDirectory($PackageDestination)
                  }
              }
              process{
                  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                  $destinationNugetFilePath = Join-Path $PackageDestination $AssetName  

                  #get download link asset
                  $uri = "https://lcsapi.lcs.dynamics.com/box/fileasset/GetFileAsset/$($ProjectId)?assetId=$($AssetId)"
                  $assetJson = (Invoke-RestMethod -Method Get -Uri $uri -Headers $header)
                  #$assetJson.FileLocation
                  $download = (-not(Test-Path $destinationNugetFilePath))

                  $upload = $true

                  $blob = Get-AzStorageBlob -Context $ctx -Container $storageContainer -Blob $AssetName -ConcurrentTaskCount 10 -ErrorAction SilentlyContinue
                  if(!$blob)
                  {
                      if($download)
                      {
                          Invoke-WebRequest -URI $assetJson.FileLocation -OutFile $destinationNugetFilePath
                      }
                  }
                  else
                  {
                      $upload = $false
                  }

                  if($upload)
                  {
                      Set-AzStorageBlobContent -Context $ctx -Container $storageContainer -Blob $AssetName -File $destinationNugetFilePath -ConcurrentTaskCount 10 -Force
                  }
              }
          }

          Import-Module PowerShellGet
          #installModules AZ

          $lcsUserName = "{{ secrets.LCS_USERNAME }}"
          $lcsUserPassword = "{{ secrets.LCS_USER_PASSWORD }}"
          $lcsProjectId = "{{ secrets.LCS_PROJECT_ID }}"
          $lcsClientId = "{{ secrets.LCS_CLIENT_ID }}"
          $regex = [regex] "\b(([0-9]*[0-9])\.){3}(?:[0-9]*[0-9]?)\b"

          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          $token = GetToken -lcsClientId $lcsClientId -lcsUserName $lcsUserName -lcsUserPasswd $lcsUserPassword
          $assetsList = GetLCSSharedAssetsList -Token $token -FileType NuGetPackage

          $assetsList | ForEach-Object{

              $version = $regex.Match($_.FileDescription).Value
              if($version -eq "")
              {
                  $version = $regex.Match($_.FileName).Value
              }
              if($version -eq "")
              {
                  return
              }
              else {
                  #$version
              }
              #check filename
              $fileName = $_.FileName
              $filenameVersion = $regex.Match($_.FileName).Value

              if($filenameVersion -eq "")
              {
                  $fileName = ($_.FileName).Replace(".nupkg",".$version.nupkg")
              }
              $fileName


              UploadAssetToStorage -AssetId $_.Id -AssetName $fileName -ProjectId $lcsProjectId -LCSToken $token
              #$_.FileName + $_.FileDescription 

          }

