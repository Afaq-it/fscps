name: Update NuGets

on:
  workflow_dispatch:
  schedule:
   - cron: '0 23 * * *'
   
defaults:
  run:
    shell: PowerShell

jobs:
  Update:
    runs-on: [ windows-latest ]
    steps:
      - uses: actions/checkout@v2

      - name: CheckUser
        run: |
          if ("$ENV:GITHUB_REPOSITORY" -eq "ciellosinc/FSC-PS" -and "$ENV:GITHUB_ACTOR" -ne "onikolaiev") {
            Write-Host "::Error::You cannot run deploy and collect in the ciellosinc/FSC-PS repo"
            exit 1
          }
      - name: Update Nugets
        run: |
     
            function GetUNHeader {
                param (
                    [string] $token,
                    [string] $accept = "application/json"
                )
                $headers = @{ "Accept" = $accept }
                if (![string]::IsNullOrEmpty($token)) {
                    $headers["Authorization"] = "Bearer $token"
                }

                return $headers
            }
            function GetToken {
                param (
                    [string] $lcsClientId,
                    [string] $lcsUserName,
                    [string] $lcsUserPasswd
                )
                $body = 'grant_type=password' + `
                '&client_id='+$($lcsClientId)+'' + `
                '&username='+$($lcsUserName)+'' +`
                '&password='+$($lcsUserPasswd)+'' +`
                '&resource=https://lcsapi.lcs.dynamics.com' +`
                '&scope=openid'

                return (Invoke-RestMethod -Method Post -Uri https://login.microsoftonline.com/common/oauth2/token -Body $body).access_token
            }                   
            function GetLCSSharedAssetsList {
                param (
                    [string] $token,
                    [LcsAssetFileType] $FileType = [LcsAssetFileType]::SoftwareDeployablePackage

                )
                $header = GetUNHeader -token $token
                $url = "https://lcsapi.lcs.dynamics.com/box/fileasset/GetSharedAssets?fileType="+$($FileType.value__)
                $assetsList = Invoke-RestMethod -Method Get -Uri $url  -Headers $header
                return $assetsList
            }    
            function UploadAssetToStorage {
                param (
                    [string]$AssetId,
                    [string]$AssetName,
                    [string]$ProjectId,
                    [string]$LCSToken,
                    [string]$PackageDestination = "C:\temp\packages"
                )
                Begin{
                    $storageAccountName = 'ciellosarchive'
                    $storageContainer = 'nuget'
                    #Just read-only SAS token :)
                    $StorageSAStoken = '${{ secrets.NUGET_STORAGE_SAS_TOKEN }}'
                    $ctx = New-AzStorageContext -StorageAccountName $storageAccountName -SasToken $StorageSAStoken
                    $header = GetUNHeader -token $token
                    if(-not(Test-Path $PackageDestination))
                    {
                        [System.IO.Directory]::CreateDirectory($PackageDestination)
                    }
                }
                process {
                    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                    $destinationNugetFilePath = Join-Path $PackageDestination $AssetName  

                    #get download link asset
                    $uri = "https://lcsapi.lcs.dynamics.com/box/fileasset/GetFileAsset/$($ProjectId)?assetId=$($AssetId)"
                    $assetJson = (Invoke-RestMethod -Method Get -Uri $uri -Headers $header)

                    if(Test-Path $destinationNugetFilePath)
                    {
                        $regex = [regex] "\b(([0-9]*[0-9])\.){3}(?:[0-9]*[0-9]?)\b"
                        $filenameVersion = $regex.Match($AssetName).Value
                        $version = Get-NuGetVersion $destinationNugetFilePath
                        $newdestinationNugetFilePath = ($destinationNugetFilePath).Replace(".$filenameVersion.nupkg", ".nupkg") 
                        $newdestinationNugetFilePath = ($destinationNugetFilePath).Replace(".nupkg",".$version.nupkg")
                        $destinationNugetFilePath
                        $version
                        $AssetName

                        if(-not(Test-Path $newdestinationNugetFilePath))
                        {
                            Rename-Item -Path $destinationNugetFilePath -NewName ([System.IO.DirectoryInfo]$newdestinationNugetFilePath).FullName -Force -PassThru
                        }
                        else
                        {
                            if($filenameVersion -eq "")
                            {
                                Remove-Item $destinationNugetFilePath
                            }
                        }
                        $destinationNugetFilePath = $newdestinationNugetFilePath
                        $destinationNugetFilePath
                    }

                    $download = (-not(Test-Path $destinationNugetFilePath))

                    $upload = $true

                    $blob = Get-AzStorageBlob -Context $ctx -Container $storageContainer -Blob $AssetName -ConcurrentTaskCount 10 -ErrorAction SilentlyContinue
                    if(!$blob)
                    {
                        if($download)
                        {               
                            # Test if AzCopy.exe exists in current folder
                            $WantFile = "azcopy.exe"
                            $AzCopyExists = Test-Path $WantFile
                            Write-Output ("AzCopy exists: {0}" -f $AzCopyExists)

                            # Download AzCopy if it doesn't exist
                            If ($AzCopyExists -eq $False)
                            {
                            Write-Output "AzCopy not found. Downloading..."

                            #Download AzCopy
                            Invoke-WebRequest -Uri "https://aka.ms/downloadazcopy-v10-windows" -OutFile AzCopy.zip -UseBasicParsing

                            #Expand Archive
                            Write-Output "Expanding archive...`n"
                            Expand-Archive ./AzCopy.zip ./AzCopy -Force

                            # Copy AzCopy to current dir
                            Get-ChildItem ./AzCopy/*/azcopy.exe | Copy-Item -Destination "./azcopy.exe"
                            }
                            else
                            {
                            Write-Output "AzCopy found, skipping download.`n"
                            }

                        
                            & ./$WantFile copy $assetJson.FileLocation "$destinationNugetFilePath"
                            if(Test-Path $destinationNugetFilePath)
                            {
                                $regex = [regex] "\b(([0-9]*[0-9])\.){3}(?:[0-9]*[0-9]?)\b"
                                $filenameVersion = $regex.Match($AssetName).Value
                                $version = Get-NuGetVersion $destinationNugetFilePath
                                $newdestinationNugetFilePath = ($destinationNugetFilePath).Replace(".$filenameVersion.nupkg", ".nupkg") 
                                $newdestinationNugetFilePath = ($destinationNugetFilePath).Replace(".nupkg",".$version.nupkg")

                                if(-not(Test-Path $newdestinationNugetFilePath))
                                {
                                    Rename-Item -Path $destinationNugetFilePath -NewName ([System.IO.DirectoryInfo]$newdestinationNugetFilePath).FullName -Force -PassThru
                                }
                                else
                                {
                                    if($filenameVersion -eq "")
                                    {
                                        Remove-Item $destinationNugetFilePath
                                        #break;
                                    }
                                }
                                $destinationNugetFilePath = $newdestinationNugetFilePath
                                $destinationNugetFilePath
                            }
                            #Invoke-D365AzCopyTransfer $assetJson.FileLocation "$destinationNugetFilePath"
                        }
                    }
                    else
                    {
                        $upload = $false
                    }

                    if($upload)
                    {            
                        $regex = [regex] "\b(([0-9]*[0-9])\.){3}(?:[0-9]*[0-9]?)\b"
                        $filenameVersion = $regex.Match($AssetName).Value
                        $version = Get-NuGetVersion $destinationNugetFilePath
                        $AssetName = ($AssetName).Replace(".$filenameVersion.nupkg", ".nupkg") 
                        $AssetName = ($AssetName).Replace(".nupkg",".$version.nupkg")

                        if($FSCVersion -ne "")
                        {
                            $versions = New-Object System.Collections.ArrayList
                            $versionsDefaultFile = "Actions\Helpers\versions.default.json"
                            $versionsDefault = (Get-Content $versionsDefaultFile) | ConvertFrom-Json
                            $versionsDefault | ForEach-Object{$versions.Add($_)}
                            $curVer = $versions.Where({$_.version -eq $FSCVersion})
                            if(!$curVer)
                            {
                                $curVer = (@{version=$FSCVersion;data=@{PlatformVersion='';AppVersion='';retailSDKVersion=''; retailSDKURL=''; ecommerceMicrosoftRepoBranch=''}} | ConvertTo-Json | ConvertFrom-Json)
                                $versions.Add($curVer)
                                $curVer = $versions.Where({$_.version -eq $FSCVersion})
                            }
                            switch ($AssetName) {
                                {$AssetName.ToLower().StartsWith("Microsoft.Dynamics.AX.Platform.CompilerPackage.".ToLower()) -or
                                $AssetName.ToLower().StartsWith("Microsoft.Dynamics.AX.Platform.DevALM.BuildXpp.".ToLower())} 
                                {  
                                    "PlatformVersion"
                                    $curVer.data.PlatformVersion=$version;
                                    break;
                                }
                                {$AssetName.ToLower().StartsWith("Microsoft.Dynamics.AX.Application.DevALM.BuildXpp.".ToLower()) -or
                                $AssetName.ToLower().StartsWith("Microsoft.Dynamics.AX.ApplicationSuite.DevALM.BuildXpp.")} 
                            {  
                                "AppVersion"
                                $curVer.data.AppVersion=$version;
                                break;
                            }
                                Default {}
                            }
                            
                            Set-Content -Path $versionsDefaultFile ($versions | ConvertTo-Json)
                        }

                        Set-AzStorageBlobContent -Context $ctx -Container $storageContainer -Blob "$AssetName" -File "$destinationNugetFilePath" -ConcurrentTaskCount 10 -Force
                    }
                }
            }
            $baseFolder = $ENV:GITHUB_WORKSPACE
            Import-Module PowerShellGet
            $helperPath = Join-Path -Path $baseFolder -ChildPath "Actions\FSC-PS-Helper.ps1" -Resolve
            . ($helperPath)            
            installModules AZ.Storage,d365fo.tools

            $lcsUserName = "${{ secrets.LCS_USERNAME }}"
            $lcsUserPassword = "${{ secrets.LCS_USER_PASSWORD }}"
            $lcsProjectId = "${{ secrets.LCS_PROJECT_ID }}"
            $lcsClientId = "${{ secrets.LCS_CLIENT_ID }}"
            $regex = [regex] "\b(([0-9]*[0-9])\.){3}(?:[0-9]*[0-9]?)\b"

            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            $token = GetToken -lcsClientId $lcsClientId -lcsUserName $lcsUserName -lcsUserPasswd $lcsUserPassword
            $assetsList = GetLCSSharedAssetsList -Token $token -FileType NuGetPackage

            $branch = [System.IO.Path]::GetRandomFileName()
            invoke-git checkout -b $branch main
            $assetsList | Sort-Object{$_.ModifiedDate} | ForEach-Object {
                $fileName = $_.FileName
                $regex = [regex] "\b(([0-9]*[0-9])\.){2}(?:[0-9]*[0-9]?)\b"
                $fscVersion = $regex.Match($_.Name).Value
                UploadAssetToStorage -FSCVersion $fscVersion -AssetId $_.Id -AssetName $fileName -ProjectId $lcsProjectId -LCSToken $token
            }
            Set-Location 
            invoke-git commit --allow-empty -m 'Update'
            invoke-git push
            invoke-git push -u $url $branch
            Write-Output "Create PR to the main"
            $releaseNotes = "No release notes available!"
            invoke-gh pr create --fill --head $branch --repo $env:GITHUB_REPOSITORY --body "$releaseNotes" --base main

