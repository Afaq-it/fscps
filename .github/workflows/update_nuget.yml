name: Update NuGets

on:
  workflow_dispatch:
  schedule:
   - cron: '0 23 * * *'
   
defaults:
  run:
    shell: PowerShell

jobs:
  Update:
    runs-on: [ windows-latest ]
    steps:
      - uses: actions/checkout@v2

      - name: CheckUser
        run: |
          if ("$ENV:GITHUB_REPOSITORY" -eq "ciellosinc/FSC-PS" -and "$ENV:GITHUB_ACTOR" -ne "onikolaiev") {
            Write-Host "::Error::You cannot run deploy and collect in the ciellosinc/FSC-PS repo"
            exit 1
          }
      - name: Update Nugets
        env:
            GH_TOKEN: ${{ github.token }}
        run: |
     
            function GetUNHeader {
                param (
                    [string] $token,
                    [string] $accept = "application/json"
                )
                $headers = @{ "Accept" = $accept }
                if (![string]::IsNullOrEmpty($token)) {
                    $headers["Authorization"] = "Bearer $token"
                }

                return $headers
            }
            function GetToken {
                param (
                    [string] $lcsClientId,
                    [string] $lcsUserName,
                    [string] $lcsUserPasswd
                )
                $body = 'grant_type=password' + `
                '&client_id='+$($lcsClientId)+'' + `
                '&username='+$($lcsUserName)+'' +`
                '&password='+$($lcsUserPasswd)+'' +`
                '&resource=https://lcsapi.lcs.dynamics.com' +`
                '&scope=openid'

                return (Invoke-RestMethod -Method Post -Uri https://login.microsoftonline.com/common/oauth2/token -Body $body).access_token
            }                   
            function GetLCSSharedAssetsList {
                param (
                    [string] $token,
                    [LcsAssetFileType] $FileType = [LcsAssetFileType]::SoftwareDeployablePackage

                )
                $header = GetUNHeader -token $token
                $url = "https://lcsapi.lcs.dynamics.com/box/fileasset/GetSharedAssets?fileType="+$($FileType.value__)
                $assetsList = Invoke-RestMethod -Method Get -Uri $url  -Headers $header
                return $assetsList
            }    
            
            function UploadAssetToStorage {
                param (
                    [string]$AssetId,
                    [string]$AssetName,
                    [string]$ProjectId,
                    [string]$LCSToken,
                    [string]$PackageDestination = "C:\temp\packages"
                )
                Begin{
                    $storageAccountName = 'ciellosarchive'
                    $storageContainer = 'nuget'
                    #Just read-only SAS token :)
                    $StorageSAStoken = '${{ secrets.NUGET_STORAGE_SAS_TOKEN }}'
                    $ctx = New-AzStorageContext -StorageAccountName $storageAccountName -SasToken $StorageSAStoken
                    $header = GetUNHeader -token $LCSToken
                    if(-not(Test-Path $PackageDestination))
                    {
                        [System.IO.Directory]::CreateDirectory($PackageDestination)
                    }
                    Remove-Item -Path $PackageDestination/* -Recurse -Force
                    OutputInfo "AssetId: $AssetId"
                    OutputInfo "AssetName: $AssetName"
                    OutputInfo "ProjectId: $ProjectId"
                    OutputInfo "LCSToken: $LCSToken"
                    OutputInfo "PackageDestination: $PackageDestination"
                }
                process {
                    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                    $destinationNugetFilePath = Join-Path $PackageDestination $AssetName  

                    #get download link asset
                    $uri = "https://lcsapi.lcs.dynamics.com/box/fileasset/GetFileAsset/$($ProjectId)?assetId=$($AssetId)"
                    $assetJson = (Invoke-RestMethod -Method Get -Uri $uri -Headers $header)

                    if(Test-Path $destinationNugetFilePath)
                    {
                        $regex = [regex] "\b(([0-9]*[0-9])\.){3}(?:[0-9]*[0-9]?)\b"
                        $filenameVersion = $regex.Match($AssetName).Value
                        $version = Get-NuGetVersion $destinationNugetFilePath
                        if($filenameVersion -ne "")
                        {
                            $newdestinationNugetFilePath = ($destinationNugetFilePath).Replace(".$filenameVersion.nupkg", ".nupkg") 
                        }
                        else { $newdestinationNugetFilePath = $destinationNugetFilePath }
                        $newdestinationNugetFilePath = ($newdestinationNugetFilePath).Replace(".nupkg",".$version.nupkg")
                        if(-not(Test-Path $newdestinationNugetFilePath))
                        {
                            Rename-Item -Path $destinationNugetFilePath -NewName ([System.IO.DirectoryInfo]$newdestinationNugetFilePath).FullName -Force -PassThru
                        }
                        $destinationNugetFilePath = $newdestinationNugetFilePath
                    }
                    $download = (-not(Test-Path $destinationNugetFilePath))
                    $upload = $true

                    OutputInfo "Download?: $download"
                    OutputInfo "Upload?: $upload"

                    $blob = Get-AzStorageBlob -Context $ctx -Container $storageContainer -Blob $AssetName -ConcurrentTaskCount 10 -ErrorAction SilentlyContinue
                    $blob
                    if(!$blob)
                    {
                        if($download)
                        {               
                            # Test if AzCopy.exe exists in current folder
                            $WantFile = "c:\temp\azcopy.exe"
                            $AzCopyExists = Test-Path $WantFile
                            Write-Output ("AzCopy exists: {0}" -f $AzCopyExists)

                            # Download AzCopy if it doesn't exist
                            If ($AzCopyExists -eq $False)
                            {
                                Write-Output "AzCopy not found. Downloading..."

                                #Download AzCopy
                                Invoke-WebRequest -Uri "https://aka.ms/downloadazcopy-v10-windows" -OutFile c:\temp\AzCopy.zip -UseBasicParsing

                                #Expand Archive
                                Write-Output "Expanding archive...`n"
                                Expand-Archive c:\temp\AzCopy.zip c:\temp\AzCopy -Force

                                # Copy AzCopy to current dir
                                Get-ChildItem c:\temp\AzCopy/*/azcopy.exe | Copy-Item -Destination "c:\temp\azcopy.exe"
                            }
                            else
                            {
                                Write-Output "AzCopy found, skipping download.`n"
                            }
                        
                            & $WantFile copy $assetJson.FileLocation "$destinationNugetFilePath" --output-level quiet
                            if(Test-Path $destinationNugetFilePath)
                            {
                                $regex = [regex] "\b(([0-9]*[0-9])\.){3}(?:[0-9]*[0-9]?)\b"
                                $filenameVersion = $regex.Match($AssetName).Value
                                $version = Get-NuGetVersion $destinationNugetFilePath
                                if($filenameVersion -ne "")
                                {
                                    $newdestinationNugetFilePath = ($destinationNugetFilePath).Replace(".$filenameVersion.nupkg", ".nupkg") 
                                }
                                else { $newdestinationNugetFilePath = $destinationNugetFilePath }
                                $newdestinationNugetFilePath = ($newdestinationNugetFilePath).Replace(".nupkg",".$version.nupkg")
                                if(-not(Test-Path $newdestinationNugetFilePath))
                                {
                                    Rename-Item -Path $destinationNugetFilePath -NewName ([System.IO.DirectoryInfo]$newdestinationNugetFilePath).FullName -Force -PassThru
                                }
                                $destinationNugetFilePath = $newdestinationNugetFilePath
                            }
                            #Invoke-D365AzCopyTransfer $assetJson.FileLocation "$destinationNugetFilePath"
                        }
                    }
                    else
                    {
                        $upload = $false
                        OutputInfo "Blob was found!"
                    }

                    $regex = [regex] "\b(([0-9]*[0-9])\.){3}(?:[0-9]*[0-9]?)\b"
                    $filenameVersion = $regex.Match($AssetName).Value
                    $version = Get-NuGetVersion $destinationNugetFilePath
                    $AssetName = ($AssetName).Replace(".$filenameVersion.nupkg", ".nupkg") 
                    $AssetName = ($AssetName).Replace(".nupkg",".$version.nupkg")
                    OutputInfo "FSCVersion:  $FSCVersion"
                    OutputInfo "AssetName:  $AssetName"

                    if($FSCVersion -ne "")
                    {
                        $versions = New-Object System.Collections.ArrayList
                        $versionsDefaultFile = "Actions\Helpers\versions.default.json"
                        $versionsDefault = (Get-Content $versionsDefaultFile) | ConvertFrom-Json
                        $versionsDefault | ForEach-Object{$versions.Add($_)}
                        $curVer = $versions.Where({$_.version -eq $FSCVersion})
                        if(!$curVer)
                        {
                            $curVer = (@{version=$FSCVersion;data=@{PlatformVersion='';AppVersion='';retailSDKVersion=''; retailSDKURL=''; ecommerceMicrosoftRepoBranch=''}} | ConvertTo-Json | ConvertFrom-Json)
                            $versions.Add($curVer)
                            $curVer = $versions.Where({$_.version -eq $FSCVersion})
                        }
                        switch ($AssetName) {
                            {$AssetName.ToLower().StartsWith("Microsoft.Dynamics.AX.Platform.CompilerPackage.".ToLower()) -or
                            $AssetName.ToLower().StartsWith("Microsoft.Dynamics.AX.Platform.DevALM.BuildXpp.".ToLower())} 
                            {  
                                $curVer.data.PlatformVersion=$version;                 
                                break;
                            }
                            {$AssetName.ToLower().StartsWith("Microsoft.Dynamics.AX.Application.DevALM.BuildXpp.".ToLower()) -or
                            $AssetName.ToLower().StartsWith("Microsoft.Dynamics.AX.ApplicationSuite.DevALM.BuildXpp.")} 
                            {  
                                $curVer.data.AppVersion=$version;
                                break;
                            }
                                Default {}
                        }
                        Set-Content -Path $versionsDefaultFile ($versions | Sort-Object{$_.version} | ConvertTo-Json)
                    }   
                    Set-AzStorageBlobContent -Context $ctx -Container $storageContainer -Blob "$AssetName" -File "$destinationNugetFilePath" -ConcurrentTaskCount 10 -Force
                }
            }
            $baseFolder = $ENV:GITHUB_WORKSPACE
            Import-Module PowerShellGet
            $helperPath = Join-Path -Path $baseFolder -ChildPath "Actions\FSC-PS-Helper.ps1" -Resolve
            . ($helperPath)            
            installModules AZ.Storage,d365fo.tools

            $lcsUserName = "${{ secrets.LCS_USERNAME }}"
            $lcsUserPassword = "${{ secrets.LCS_USER_PASSWORD }}"
            $lcsProjectId = "${{ secrets.LCS_PROJECT_ID }}"
            $lcsClientId = "${{ secrets.LCS_CLIENT_ID }}"
            $regex = [regex] "\b(([0-9]*[0-9])\.){3}(?:[0-9]*[0-9]?)\b"

            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            $lcstoken = GetToken -lcsClientId $lcsClientId -lcsUserName $lcsUserName -lcsUserPasswd $lcsUserPassword
            $assetsList = GetLCSSharedAssetsList -Token $lcstoken -FileType NuGetPackage

            Set-Location $baseFolder
            $branch = [System.IO.Path]::GetRandomFileName()
            $githubOwner = "$ENV:GITHUB_ACTOR"

            invoke-git config --global user.email "$githubOwner@users.noreply.github.com"
            invoke-git config --global user.name "$githubOwner"
            invoke-git config --global hub.protocol https
            invoke-git config --global core.autocrlf true

            invoke-git checkout -b $branch main
            $assetsList | Sort-Object{$_.ModifiedDate} | ForEach-Object {
                $fileName = $_.FileName
                $regex = [regex] "\b(([0-9]*[0-9])\.){2}(?:[0-9]*[0-9]?)\b"
                $fscVersion = $regex.Match($_.Name).Value
                if($fscVersion -gt "10.0.17")
                {
                    OutputInfo "#################### $fscVersion #####################"
                    UploadAssetToStorage -FSCVersion $fscVersion -AssetId $_.Id -AssetName $fileName -ProjectId $lcsProjectId -LCSToken $lcstoken
                }
            }
            Set-Location $baseFolder
            invoke-git add .

            $status = invoke-git status --porcelain=v2 -returnValue
            OutputInfo "Git changes: $($status)"
            if ($status) {
                invoke-git commit --allow-empty -m 'Update'
                invoke-git push -u origin $branch
                Write-Output "Create PR to the main"
                $releaseNotes = "No release notes available!"
                invoke-gh pr create --fill --head $branch --repo "https://github.com/ciellosinc/FSC-PS.git" --body "$releaseNotes" --base main
            }
